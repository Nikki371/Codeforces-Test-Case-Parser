#!/usr/bin/python

"""

CODEFORCES SAMPLE TESTCASE PARSER
                  -- Nikhilesh Chamarthi

Requirements :
* Beautiful Soup
* Python2
* Terminal with g++ installed
* Requests

"""

import os
import requests
import sys
import time
import webbrowser
from bs4 import BeautifulSoup

probeids = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def ExrtactSample(url) :
    response = requests.get(url)
    html = response.content
    soup = BeautifulSoup(html, "lxml")
    ext = soup.find('div', class_= "problemindexholder", problemindex = url[-1])
    if ext == None :
        return False

    file = open(url[-1] + 'st' + '.in', 'w')
    sinput = ext.find_all('div', class_ = "input")
    soutput = ext.find_all('div', class_ = "output")

    NO_OF_TESTS = len(sinput)
    # first line has NO_OF_TESTS
    file.write(str(NO_OF_TESTS) + "\n")

    for i in range(NO_OF_TESTS) :
        file.write("TEST_BEGINS : " + str(i + 1) + "\n")
        file.write("INPUT\n")
        fmtinp = sinput[i].find('pre')

        for e in fmtinp.find_all('br') :
            e.extract()

        for sinp in fmtinp :
            file.write(str(sinp) + "\n")

        file.write("OUTPUT\n")
        fmtop = soutput[i].find('pre')

        for e in fmtop.find_all('br') :
            e.extract()

        for sop in fmtop :
            file.write(str(sop) + "\n")

        file.write("TEST_ENDS\n")

    file.close()
    return True

def test(fname, tnum) :
    # Works with executables generated by gcc, g++
    fpath = fname.upper() + 'st' + '.in'
    if not os.path.exists(fpath) :
        print "Its either a wrong problemID or that you didn't parse the contest yet"
        return

    # May produce bug here if format of first line in the .in file is changed
    testfile = open(fpath, 'r')
    tfdat = testfile.readlines()
    testfile.close()
    tc = int(tfdat[0])
    if tnum == 0 :
        idx = 0
        for i in range(tc) :
            idx += 2
            print "INPUTFILE#" + str(i + 1)

            # tempfileinput stores 'input only' for the current sample test case
            tempbuffer = open('tempfileinput.in', 'w')
            eoutbuffer = open('expectedoutput.out', 'w')
            currbuffer = tfdat[idx]

            # ibool and obool for placing text into respective files
            ibool = False
            obool = False
            while currbuffer != "TEST_ENDS\n" :
                if currbuffer == "INPUT\n" :
                    ibool = True
                elif currbuffer == "OUTPUT\n" :
                    ibool = False
                    obool = True
                else :
                    if ibool :
                        tempbuffer.write(currbuffer)
                        print currbuffer,
                    elif obool :
                        eoutbuffer.write(currbuffer)
                idx += 1
                currbuffer = tfdat[idx]

            tempbuffer.close()
            eoutbuffer.close()
            os.system("./a.out < tempfileinput.in > actualoutput.out")

            eoutbuffer = open('expectedoutput.out', 'r')
            aoutbuffer = open('actualoutput.out', 'r')
            print "OUTPUT:"
            tmpcrawl = aoutbuffer.readlines()
            tmpcrawl1 = eoutbuffer.readlines()
            aoutbuffer.close()
            eoutbuffer.close()
            for i in range(len(tmpcrawl)) :
                print tmpcrawl[i],

            print ""
            print "EXPECTED_OUPUT:"
            for i in range(len(tmpcrawl1)) :
                print tmpcrawl1[i],

            print "============================"

    else :
        if tnum > tc :
            print "Invalid : Only " + str(tc) + " testcases are available"
            return

        idx = 0
        tempbuffer = open('tempfileinput.in', 'w')
        eoutbuffer = open('expectedoutput.out', 'w')
        currbuffer = tfdat[idx]

        # ibool and obool for placing text into respective files
        ibool = False
        obool = False

        print "INPUTFILE#" + str(tnum)

        qstr = "TEST_BEGINS : " + str(tnum)
        while qstr not in currbuffer :
            idx += 1
            currbuffer = tfdat[idx]

        idx += 1
        currbuffer = tfdat[idx]
        while currbuffer != "TEST_ENDS\n" :
            if currbuffer == "INPUT\n" :
                ibool = True
            elif currbuffer == "OUTPUT\n" :
                ibool = False
                obool = True
            else :
                if ibool :
                    tempbuffer.write(currbuffer)
                    print currbuffer,

                elif obool :
                    eoutbuffer.write(currbuffer)

            idx += 1
            currbuffer = tfdat[idx]

        tempbuffer.close()
        eoutbuffer.close()
        os.system("./a.out < tempfileinput.in > actualoutput.out")

        eoutbuffer = open('expectedoutput.out', 'r')
        aoutbuffer = open('actualoutput.out', 'r')
        print "OUTPUT"
        tmpcrawl = aoutbuffer.readlines()
        tmpcrawl1 = eoutbuffer.readlines()
        aoutbuffer.close()
        eoutbuffer.close()
        for i in range(len(tmpcrawl)) :
            print tmpcrawl[i],

        print ""
        print "EXPECTED_OUPUT"
        for i in range(len(tmpcrawl1)) :
            print tmpcrawl1[i],


def clearfiles() :
    global probeids
    for i in range(len(probeids)) :
        try :
            os.remove(probeids[i] + 'st.in')
        except OSError :
            pass
    try :
        os.remove('tempfileinput.in')
    except OSError :
        pass
    try :
        os.remove('actualoutput.out')
    except OSError :
        pass
    try :
        os.remove('expectedoutput.out')
    except OSError :
        pass

def submit(cid, probid, filename) :
    # Under Development
    # webbrowser.open_new_tab('http://codeforces.com/contest/' + cid + '/submit')
    return

def main():
    Instructions = "Try providing arguments as given below\n"
    Instructions += "* parse <contest number> (Ex: parse 825)\n"
    Instructions += "* test <problemid> <test no.> (Ex: test A 2)\n"
    Instructions += "* clean (To clear all created files in the current directory)\n"
    Instructions += "* submit <contestID> <problemid> <filename> (Ex: submit 825 C c.cpp)\n"
    Instructions += "Note :\n1. Test must be done after generating corresponding './a.out' executable.\n"
    Instructions += "2. Give 0 as 'test no.' to test all cases.\n"

    if len(sys.argv) <= 1 :
        print Instructions
        return

    if sys.argv[1] == "parse" :
        ContestNumber = sys.argv[2]
        url = 'http://codeforces.com/contest/'
        url += ContestNumber + '/problem/'

        global probeids
        # Limitation : max-problems - 26 ; ids - Uppercase english alphabets
        for i in range(len(probeids)) :
            if ExrtactSample(url + probeids[i]) == False :
                break
        print "Parsed Successfully"

    elif sys.argv[1] == "test" :
        test(sys.argv[2], int(sys.argv[3]))

    elif sys.argv[1] == "clean" :
        clearfiles()

    elif sys.argv[1] == "submit" :
        submit(sys.argv[2], sys.argv[3], sys.argv[4])

    else :
        print Instructions

if __name__ == '__main__':
    main()
